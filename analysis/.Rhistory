ct_tol.tolcl,
Samples.sampleCnt
FROM diatom_data.counts
JOIN
ct_tol ON counts.shortName = ct_tol.taxa
JOIN
Samples ON counts.staSeq = Samples.staSeq AND
counts.date = Samples.date AND
counts.duplicate = Samples.duplicate
GROUP BY counts.staSeq,
Samples.locationName,
counts.date,
counts.duplicate,
ct_tol.tolcl,
Samples.sampleCnt;"
d_TP <- dbGetQuery(conn=db,SQL); #returns data.frame
dbDisconnect(db)
db_path <- 'C:/Users/deepuser/Documents/Projects/DiatomData/'
db <- dbConnect(SQLite(), dbname=paste(db_path,"diatom_data.db",sep=''));
# Select data to calculate CT TP metrics
SQL <- "SELECT
counts.staSeq,
Samples.locationName,
counts.date,
counts.duplicate,
SUM(counts.count) AS SumCnts,
ct_tol.tolcl,
Samples.sampleCnt
FROM diatom_data.counts
JOIN
ct_tol ON counts.shortName = ct_tol.taxa
JOIN
Samples ON counts.staSeq = Samples.staSeq AND
counts.date = Samples.date AND
counts.duplicate = Samples.duplicate
GROUP BY counts.staSeq,
Samples.locationName,
counts.date,
counts.duplicate,
ct_tol.tolcl,
Samples.sampleCnt;"
d_TP <- dbGetQuery(conn=db,SQL); #returns data.frame
db
dbDisconnect(db)
db_path <- 'C:/Users/deepuser/Documents/Projects/DiatomData/'
db <- dbConnect(SQLite(), dbname=paste(db_path,"diatom_data.db",sep=''));
SQL <- "SELECT * FROM counts;"
dbGetQuery(conn=db,SQL)
SQL <- "SELECT
counts.staSeq,
Samples.locationName,
counts.date,
counts.duplicate,
SUM(counts.count) AS SumCnts,
ct_tol.tolcl,
Samples.sampleCnt
FROM counts
JOIN
ct_tol ON counts.shortName = ct_tol.taxa
JOIN
Samples ON counts.staSeq = Samples.staSeq AND
counts.date = Samples.date AND
counts.duplicate = Samples.duplicate
GROUP BY counts.staSeq,
Samples.locationName,
counts.date,
counts.duplicate,
ct_tol.tolcl,
Samples.sampleCnt;"
d_TP <- dbGetQuery(conn=db,SQL); #returns data.frame
d_TP[1:10,]
dbDisconnect(db)
d_TP$RA <- d_TP$SumCnts / d_TP$sampleCnt
dbDisconnect(db)
d_TP[1:10,]
d_TP[d_TP$tolcl == 'Increasing',]
dim(d_TP)
library('dplyr')
arrange(d_TP[d_TP$tolcl == 'Increasing',c(1,2,8)],desc(RA))
arrange(d_TP[d_TP$tolcl == 'Increasing',c(1:3,8)],desc(RA))
library('RSQLite')
library('dplyr')
# open ODBC
db_path <- 'C:/Users/deepuser/Documents/Projects/DiatomData/'
db <- dbConnect(SQLite(), dbname=paste(db_path,"diatom_data.db",sep=''));
# Select data to calculate CT TP metrics
SQL <- "SELECT
counts.staSeq,
Samples.locationName,
counts.date,
counts.duplicate,
SUM(counts.count) AS SumCnts,
ct_tol.tolcl,
Samples.sampleCnt
FROM counts
JOIN
ct_tol ON counts.shortName = ct_tol.taxa
JOIN
Samples ON counts.staSeq = Samples.staSeq AND
counts.date = Samples.date AND
counts.duplicate = Samples.duplicate
GROUP BY counts.staSeq,
Samples.locationName,
counts.date,
counts.duplicate,
ct_tol.tolcl,
Samples.sampleCnt;"
d_TP <- dbGetQuery(conn=db,SQL); #returns data.frame
dbDisconnect(db)
d_TP$RA <- d_TP$SumCnts / d_TP$sampleCnt
arrange(d_TP[d_TP$tolcl == 'Increasing',c(1:3,8)],desc(RA))
d_RAtol <- arrange(d_TP[d_TP$tolcl == 'Increasing',c(1:3,8)],desc(RA))
d_RAtol[d_RAtol$RA>0.25,]
legacy <- c(16119, 19940, 16122, 16120, 15014, 17852,
16191, 16416, 14866, 20123)
d_TP[d_TP$staSeq%in%legacy,]
d_RAtol[d_RAtol$staSeq%in%legacy,]
d_RAsen <- arrange(d_TP[d_TP$tolcl == 'Decreasing',c(1:3,8)],desc(RA))
d_RAsen[d_RAsen$staSeq%in%legacy,]
d_RAtol
db_path <- 'C:/Users/deepuser/Documents/Projects/DiatomData/'
db <- dbConnect(SQLite(), dbname=paste(db_path,"diatom_data.db",sep=''));
# Select data to calculate CT TP metrics
SQL <- "SELECT
counts.staSeq,
Samples.locationName,
counts.date,
counts.duplicate,
SUM(counts.count) AS SumCnts,
ct_tol.tolcl,
Samples.sampleCnt
FROM counts
JOIN
ct_tol ON counts.shortName = ct_tol.taxa
JOIN
Samples ON counts.staSeq = Samples.staSeq AND
counts.date = Samples.date AND
counts.duplicate = Samples.duplicate
GROUP BY counts.staSeq,
Samples.locationName,
counts.date,
counts.duplicate,
ct_tol.tolcl,
Samples.sampleCnt;"
d_TP <- dbGetQuery(conn=db,SQL); #returns data.frame
SQL <- "SELECT * FROM stations;"
s   <- dbGetQuery(conn=db,SQL)
dbDisconnect(db)
d_TP$RA <- d_TP$SumCnts / d_TP$sampleCnt
d_RAtol <- arrange(d_TP[d_TP$tolcl == 'Increasing',c(1:3,8)],desc(RA))
d_RAsen <- arrange(d_TP[d_TP$tolcl == 'Decreasing',c(1:3,8)],desc(RA))
hi_RAtol <- unique(d_RAtol[d_RAtol$RA>=0.25,1])
hi_RAtol
s_hi_RAtol <- s[s$staSeq%in%hi_RAtol,]
s_hi_RAtol
f_out <- 'C:/Users/deepuser/Documents/Projects
/GISPrjs/2021/diatom_sampling_2021/data'
f_out
write.csv(s_hi_RAtol,paste(f_out,'/HighTPTolDiatomsSites.csv'),row.names=FALSE)
write.csv(s_hi_RAtol,paste0(f_out,'/HighTPTolDiatomsSites.csv'),row.names=FALSE)
paste0(f_out,'/HighTPTolDiatomsSites.csv')
f_out <- 'C:/Users/deepuser/Documents/Projects/GISPrjs/2021/diatom_sampling_2021/data'
write.csv(s_hi_RAtol,paste0(f_out,'/HighTPTolDiatomsSites.csv'),row.names=FALSE)
s_high <- c(14263,14461,16050,14241,14520)
s_out  <- s[s$staSeq%in%s_high,]
hi_RAtol
d_RAtol
library('stringr')
d_RAtol$date[1:4]
d_RAtol$date[1]
d_RAtol$date[1][1:4]
str_sub(d_RAtol$date[1],1,4)
d_TP[str_sub(d_RAtol$date,1,4)==2020,]
d_TP[str_sub(d_TP$date,1,4)==2020,]
d_TP[str_sub(d_TP$date,1,4)==2020,c(1:4,7)]
d_TP[str_sub(d_TP$date,1,4)==2020,c(1:4,8)]
d_TP[str_sub(d_TP$date,1,4)==2020,c(1:5,8)]
d_TP[str_sub(d_TP$date,1,4)==2020,c(1:4,6,8)]
d_RAtol[d_RAtol$staSeq%in%legacy,]
d_RAsen[d_RAsen$staSeq%in%legacy,]
s_out
write.csv(s_out,'highTPeDNAprj.csv',row.names=FALSE)
getwd()
hi_RAtol[hi_RAtol$staSeq==14390,]
hi_RAtol[hi_RAtol$staSeq==14390,]
hi_RAtol
d_RAtol[d_RAtol$staSeq==14390,]
s_hi_RAtol
s_hi_RAtol[s_hi_RAtol$staSeq==14390,]
install.packages("odbc")
library(DBI)
con <- dbConnect(RMySQL::MySQL(),
dbname = "awqx",
host = "localhost",
port = 3306,
user = "pyuser",
password = "test")
install.packages("RMySQL")
con <- dbConnect(RMySQL::MySQL(),
dbname = "awqx",
host = "localhost",
port = 3306,
user = "pyuser",
password = "test")
tables <- dbListTables(con)
tables
sql_select <- dbSendQuery(con, "SELECT * FROM stations;")
s <- dbFetch(sql_select)
s[1:10,]
names(s)
j_s <- read.csv('C:/Users/deepuser/Desktop/sites_forJen',header=TRUE)
j_s <- read.csv('C:/Users/deepuser/Desktop/sites_forJen.csv',header=TRUE)
j_s
length(j_s)
dim(j_s)
names(j_s)
class(j_s)
colnames(j_s) <- "staSeq"
names(j_s)
s_latlong <- s[s$staSeq%in%j_s$staSeq,]
dim(s_latlong)
dim(j_s)
s_latlong
j_s <- read.csv('C:/Users/deepuser/Desktop/sites_forJen.csv',header=TRUE)
colnames(j_s) <- "staSeq"
dim(staSeq)
dim(j_s)
s_latlong <- s[s$staSeq%in%j_s$staSeq,]
dim(s_latlong)
dim(s)
sql_select <- dbSendQuery(con, "SELECT * FROM stations")
s <- dbFetch(sql_select)
dbClearResult(sql_select)
sql_select <- dbSendQuery(con, "SELECT * FROM stations")
s <- dbFetch(sql_select)
dim(s)
dbClearResult(sql_select)
sql_select <- dbSendQuery(con, "SELECT staSeq, locationName, ylat, xlong FROM awqx.stations;")
s <- dbFetch(sql_select)
dbClearResult(sql_select)
dim(s)
s[1:10,]
sql_select <- dbSendQuery(con, "SELECT staSeq, ylat, xlong FROM awqx.stations;")
s <- dbFetch(sql_select)
dbClearResult(sql_select)
dim(s)
library(DBI)
library(odbc)
sort(unique(odbcListDrivers()[[1]]))
con <- dbConnect(odbc(),
Driver = "MySQL ODBC 8.0 ANSI Driver",
Server = "localhost",
Database = "awqx",
Trusted_Connection = "True")
con <- dbConnect(odbc(),
Driver = "MySQL ODBC 8.0 ANSI Driver",
Server = "localhost",
Database = "awqx",
Trusted_Connection = "True",
uid="pyuser",
pwd="test")
s< - dbReadTable(con,"stations")
sql_select <- dbGetQuery(con, "SELECT staSeq, locationName, ylat, xlong FROM awqx.stations;")
s <- dbFetch(sql_select)
dbClearResult(sql_select)
sql_select[1:10,]
dim(sql_select)
sql_select <- ("SELECT staSeq, locationName, ylat, xlong FROM awqx.stations;")
sites <- dbGetQuery(con, sql_select)
j_s <- read.csv('C:/Users/deepuser/Desktop/sites_forJen.csv',header=TRUE)
colnames(j_s) <- "staSeq"
dim(sites)
dim(j_s)
s_latlong <- sites[sites$staSeq%in%j_s$staSeq,]
dim(s_latlong)
length(unique(j_s$staSeq))
s_latlong[1:10,]
write.csv(s_latlong,'C:/Users/deepuser/Desktop/CT_bug_sites_09072021.csv')
DBI::dbDisconnect(con)
library(odbc)
# Connect to the MySQL database: con
con <- dbConnect(odbc(),
Driver = "MySQL ODBC 8.0 ANSI Driver",
Server = "localhost",
Database = "awqx",
Trusted_Connection = "True",
uid="pyuser",
pwd="test")
sql_select <- ("SELECT staSeq, locationName, ylat, xlong FROM awqx.stations;")
sites <- dbGetQuery(con, sql_select)
sites[1:10,]
dbDisconnect()
dbDisconnect(con)
if(!require(remotes)){install.packages("remotes")}  #install if needed
install_github("leppott/BCGcalc", force=TRUE)
library(BioMonTools)
library(BCGcalc)
df <- data.frame(staSeq=integer(""),name=character(""))
df <- data.frame(staSeq=integer("17105"),name=character("TATETUCK BROOK"))
df <- data.frame(staSeq=17105,name="TATETUCK BROOK")
df
class(df$staSeq)
class(df$name)
df <- data.frame(staSeq=17105,name="TATETUCK BROOK",date="2001-06-01")
df
class(df$date)
install.packages("writexl")
library(writexl)
write_xlsx(df,"C:/Users/deepuser/Desktop/df_xlsx_test.xlsx")
library(DBI)
library(odbc)
access_file <- "C:/Users/deepuser/Documents/Projects/wqDB_docs/awx_data_insert.accdb"
con <- dbConnect(odbc(),
dsn = access_file)
con <- dbConnect(odbc(),
DBQ = access_file)
install.packages("RODBC")
library(RODBC)
access_file <- "C:/Users/deepuser/Documents/Projects/wqDB_docs/awx_data_insert.accdb"
# Connect to the MySQL database: con
con <- odbcConnectAccess(access_file)
con <- odbcConnectAccess2007(access_file)
library(DBI)
library(odbc)
access_file <- "C:/Users/deepuser/Documents/Projects/wqDB_docs/awx_data_insert.accdb"
# Connect to the MySQL database: con
con <- dbConnect(odbc(),
dsn = awx_data_insert.mdb)
access_file <- "C:/Users/deepuser/Documents/Projects/wqDB_docs/awx_data_insert.mdb"
# Connect to the MySQL database: con
con <- dbConnect(odbc(),
dsn = access_file)
con <- dbConnect(odbc(),
dsn = awx_data_insert.mdb)
con <- dbConnect(odbc(),
Driver = "MS Access Database"
dsn = awx_data_insert.accdb)
con <- dbConnect(odbc(),
Driver = "MS Access Database",
dsn = awx_data_insert.accdb)
access_file <- "C:/Users/deepuser/Documents/Projects/wqDB_docs/awx_data_insert.accdb"
access_file <- "C:/Users/deepuser/Documents/Projects/wqDB_docs/awx_data_insert.accdb"
# Connect to the MySQL database: con
con <- dbConnect(odbc(),
Driver = "MS Access Database",
dsn = access_file)
library('RSQLite')
library('dplyr')
library('stringr')
# legacy <- c(16119, 19940, 16122, 16120, 15014, 17852,
#             16191, 16416, 14866, 20123)
# open ODBC
db_path <- 'C:/Users/deepuser/Documents/Projects/DiatomData/'
db <- dbConnect(SQLite(), dbname=paste(db_path,"diatom_data.db",sep=''));
# Select data to calculate CT TP metrics
SQL <- "SELECT
counts.staSeq,
Samples.locationName,
counts.date,
counts.duplicate,
SUM(counts.count) AS SumCnts,
ct_tol.tolcl,
Samples.sampleCnt
FROM counts
JOIN
ct_tol ON counts.shortName = ct_tol.taxa
JOIN
Samples ON counts.staSeq = Samples.staSeq AND
counts.date = Samples.date AND
counts.duplicate = Samples.duplicate
GROUP BY counts.staSeq,
Samples.locationName,
counts.date,
counts.duplicate,
ct_tol.tolcl,
Samples.sampleCnt;"
d_TP <- dbGetQuery(conn=db,SQL); #returns data.frame
SQL <- "SELECT * FROM stations;"
s   <- dbGetQuery(conn=db,SQL)
dbDisconnect(db)
d_TP$RA <- d_TP$SumCnts / d_TP$sampleCnt
# Separate out tolerant TP and sensitive TP diatom metrics
d_RAtol <- arrange(d_TP[d_TP$tolcl == 'Increasing',c(1:3,8)],desc(RA))
d_RAsen <- arrange(d_TP[d_TP$tolcl == 'Decreasing',c(1:3,8)],desc(RA))
hi_RAtol <- unique(d_RAtol[d_RAtol$RA>=0.25,1])
s_hi_RAtol <- s[s$staSeq%in%hi_RAtol,]
hi_RAtol
s_hi_RAtol
View(s_hi_RAtol)
d_TP
d_TP
d_TP[1:10,]
class(d_TP$date)
max(substr(d_TP$,1,4))
max(substr(d_TP$date,1,4))
min(substr(d_TP$date,1,4))
d_TP[d_TP$locationName=="Pequabuck River",]
install.packages("rmarkdown", dependencies = TRUE)
plot(cars)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(rmarkdown)
install.packages("leaflet")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(leaflet)
m <- leaflet() %>% setView(lng = -72.6999, lat = 41.5999, zoom = 12)
m %>% addTiles()
library(leaflet)
m <- leaflet() %>% setView(lng = -72.6999, lat = 41.5999, zoom = 9)
m %>% addTiles()
library(leaflet)
m <- leaflet() %>% setView(lng = -72.6999, lat = 41.5999, zoom = 9)
m %>% addProviderTiles(providers$CartoDB.Voyager)
install.packages("sf")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
# set working directory
setwd("C:/Users/deepuser/Documents/Projects/ProgramDev/HQStreamEval/")
library(leaflet)
library(sf)
#read in data
d <- read.csv("data/bug_bcg_sites_020422.csv",header=TRUE)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(leaflet)
library(sf)
#read in data
d <- read.csv("data/bug_bcg_sites_020422.csv",header=TRUE)
m <- leaflet() %>% setView(lng = -72.6999, lat = 41.5999, zoom = 9)
m %>%
addProviderTiles(providers$CartoDB.Voyager)
names(d)
sp_d <- SpatialPointsDataFrame(coords = d[,c(YLAT,XLONG)], data = d, proj4string = CRS("+proj=longlat +datum=WGS84"))
library(sf)
sp_d <- SpatialPointsDataFrame(coords = d[,c(YLAT,XLONG)], data = d, proj4string = CRS("+proj=longlat +datum=WGS84"))
library(spatial)
library(sp)
sp_d <- SpatialPointsDataFrame(coords = d[,c(YLAT,XLONG)], data = d, proj4string = CRS("+proj=longlat +datum=WGS84"))
sp_d <- SpatialPointsDataFrame(coords = d[,c("YLAT","XLONG")], data = d, proj4string = CRS("+proj=longlat +datum=WGS84"))
library(leaflet)
library(sp)
# read in data
d <- read.csv("data/bug_bcg_sites_020422.csv",header=TRUE)
# convert to spatial point dataframe
sp_d <- SpatialPointsDataFrame(coords = d[,c("YLAT","XLONG")], data = d, proj4string = CRS("+proj=longlat +datum=WGS84"))
m <- leaflet(data = sp_d) %>% setView(lng = -72.6999, lat = 41.5999, zoom = 9)
m %>%
addProviderTiles(providers$CartoDB.Voyager) %>%
addMarkers(~XLONG, ~YLAT)
library(leaflet)
library(sp)
# read in data
d <- read.csv("data/bug_bcg_sites_020422.csv",header=TRUE)
# convert to spatial point dataframe
sp_d <- SpatialPointsDataFrame(coords = d[,c("YLAT","XLONG")], data = d, proj4string = CRS("+proj=longlat +datum=WGS84"))
m <- leaflet(data = sp_d) %>% setView(lng = -72.6999, lat = 41.5999, zoom = 9)
m %>%
addProviderTiles(providers$CartoDB.Voyager) %>%
addCircleMarkersMarkers(~XLONG, ~YLAT, radius = 6, stroke = FALSE, fillOpacity = 0.5)
library(leaflet)
library(sp)
# read in data
d <- read.csv("data/bug_bcg_sites_020422.csv",header=TRUE)
# convert to spatial point dataframe
sp_d <- SpatialPointsDataFrame(coords = d[,c("YLAT","XLONG")], data = d, proj4string = CRS("+proj=longlat +datum=WGS84"))
m <- leaflet(data = sp_d) %>% setView(lng = -72.6999, lat = 41.5999, zoom = 9)
m %>%
addProviderTiles(providers$CartoDB.Voyager) %>%
addCircleMarkers(~XLONG, ~YLAT, radius = 6, stroke = FALSE, fillOpacity = 0.5)
render("bcg_data_exploration.Rmd")
library(rmarkdown)
render("C:\\Users\\deepuser\\Documents\\Projects\\ProgramDev\\HQStreamEval\\analysis\\bcg_data_exploration.Rmd")
knitr::opts_chunk$set(message=FALSE, warning=FALSE)
library(leaflet)
library(sp)
# read in data
d <- read.csv("data/bug_bcg_sites_020422.csv",header=TRUE)
# Number of Sites in the dataset
dim(d)[1]
render("C:\\Users\\deepuser\\Documents\\Projects\\ProgramDev\\HQStreamEval\\analysis\\bcg_data_exploration.Rmd")
names(d)
# convert to spatial point dataframe
sp_d <- SpatialPointsDataFrame(coords = d[,c("YLAT","XLONG")],
data = d,
proj4string = CRS("+proj=longlat +datum=WGS84"))
m <- leaflet(data = sp_d) %>% setView(lng = -72.6999, lat = 41.5999, zoom = 9)
m %>%
addProviderTiles(providers$CartoDB.Voyager) %>%
addCircleMarkers(~XLONG, ~YLAT, radius = 6, stroke = FALSE, fillOpacity = 0.5,
label = ~paste("Site ID & Name:",STASEQ,NAME))
# convert to spatial point dataframe
sp_d <- SpatialPointsDataFrame(coords = d[,c("YLAT","XLONG")],
data = d,
proj4string = CRS("+proj=longlat +datum=WGS84"))
m <- leaflet(data = sp_d) %>% setView(lng = -72.6999, lat = 41.5999, zoom = 9)
m %>%
addProviderTiles(providers$CartoDB.Voyager) %>%
addCircleMarkers(~XLONG, ~YLAT, radius = 6, stroke = FALSE, fillOpacity = 0.5,
label = ~NAME)
render("C:\\Users\\deepuser\\Documents\\Projects\\ProgramDev\\HQStreamEval\\analysis\\bcg_data_exploration.Rmd")
render("C:\\Users\\deepuser\\Documents\\Projects\\ProgramDev\\HQStreamEval\\analysis\\bcg_data_exploration.Rmd")
install.packages("bookdown",dependencies = TRUE)
base <- "C:/Users/deepuser/Documents/Projects/ProgramDev"
setwd(paste0(base,"/HQStreamEval/analysis"))
library(lubridate)
# read in data
f <- read.csv("analysis/data/raw/fish_bcg_030522.csv",header=TRUE)
b <- read.csv("analysis/data/raw/bug_bcg_030522.csv", header=TRUE)
install.packages(ggplot2,reshape2,sf,dependencies = TRUE)
install.packages('ggplot2','reshape2','sf',dependencies = TRUE)
install.packages("ggplot2")
install.packages(c("sf", "reshape2"))
install.packages("leaflet")
