install.packages(c("ggplot2","vegan","lubridate"),dependencies=TRUE)
install.packages("dataRetrieval")
install.packages("EGRET")
library(EGRET)
############################
# Gather discharge data:
siteID <- "01208500" #Naugatuck River
startDate <- "" #Gets earliest date
endDate <- "2016-09-30"
# Gather sample data:
parameter_cd<-"00665" #5 digit USGS code
Sample <- readNWISSample(siteID,parameter_cd,startDate,endDate)
#Gets earliest date from Sample record:
#This is just one of many ways to assure the Daily record
#spans the Sample record
startDate <- min(as.character(Sample$Date))
# Gather discharge data:
Daily <- readNWISDaily(siteID,"00060",startDate,endDate)
INFO<- readNWISInfo(siteID,parameter_cd)
INFO$shortName <- "Naugatuck River Beacon Falls"
eList <- mergeReport(INFO, Daily, Sample)
boxConcMonth(eList)
dim(eList)
eList[1:10,]
eList
names(Sample)
dim(Sample)
Sample{1:10,}
Sample[1:10,]
csv_dir <- '/home/mkozlak/Documents/Projects/2020/TemperatureDB/HOBO Data for DB Upload - Fall 2019/csv/'
files <- list.files(csv_dir,'*.csv'); #only csv files extensions
m <- length(files);
csv_dir
files
j<-1
data <- read.table(paste(csv_dir,files[j],sep=''),sep=',',header=T, stringsAsFactors=F,
na.strings=c("","NA"));
data
names(data)
temp<-  data.frame(ProbeID=character(), SID=integer(), Date_Time=character(),
Temp=double(),UOM=character(),Collector=character(),ProbeType=character())
names(temp)
csv_dir <- '/home/mkozlak/Documents/Projects/2020/TemperatureDB/HOBO Data for DB Upload - Fall 2019/csv/'
files <- list.files(csv_dir,'*.csv'); #only csv files extensions
m <- length(files);
temp<-  data.frame(ProbeID=character(), SID=integer(), Date_Time=character(),
Temp=double(),UOM=character(),Collector=character(),ProbeType=character())
STA_SEQ=integer(),SampYr1=integer(),
BCGYr1=double(),SampYr2=integer(),
BCGYr2=double())#Create empty dataframe to store combinations
for (i in 1:m){#for each csv files in the directory}
data <- read.table(paste(csv_dir,files[j],sep=''),sep=',',header=T, stringsAsFactors=F,
na.strings=c("","NA"));
#reorder by column name for insert to match the SQLite DB
data <- data[c("ProbeID", "SID", "Date_Time","Temp","UOM","Collector","ProbeType")]
temp<-rbind(temp,data)
}
temp[1:10]
temp[1:10,]
temp[1000:1010,]
library(RSQLite)
library(plyr)
library(ggplot2)
library(lubridate)
#open ODBC
db_path <- '/home/mkozlak/Documents/Projects/2020/TemperatureDB/' #linux path
db <- dbConnect(SQLite(), dbname=paste(db_path,"stream.temperature.sqlite",sep=''));
##Query with Field Flags and put into R data.fram and native R types
SELECTflag<- "SELECT probe_temps.ProbeID, probe_temps.SID, probe_temps.Date_Time, probe_temps.Temp, probe_temps.UOM, probe_temps.Collector, probe_temps.ProbeType, fieldflag.DateStart, fieldflag.DateEnd, fieldflag.COMMENT
FROM probe_temps
LEFT JOIN fieldflag ON probe_temps.ProbeID = fieldflag.ProbeID AND probe_temps.SID = fieldflag.SID AND probe_temps.Date_Time >= fieldflag.DateStart AND probe_temps.Date_Time <= fieldflag.DateEnd"
table<- dbGetQuery(db,SELECTflag)
table$day <- substr(table$Date_Time,6,10)##Add column of data that includes month_day
table$month<- substr(table$Date_Time,6,7)##Add column of data that includes month
table$year<- substr(table$Date_Time,1,4)##Add column of data that includes year
table$date<-ymd_hms(table$Date_Time)
AvgDay <- ddply(table,c("ProbeID","SID","day","month","year","Collector","UOM","COMMENT"),summarize,mean=mean(Temp),min=min(Temp),
max=max(Temp),maxmin= (max(Temp)-min(Temp)),N=length(Temp))#AvgByDay
AvgDay$Flag [AvgDay$N<24|AvgDay$min<0|AvgDay$maxmin>5|AvgDay$mean>=30]<-1
AvgDay$Flag [!is.na(AvgDay$COMMENT)]<-1
TempMetricsAll<-data.frame(SID=character(),SummerTemp=numeric(),SN=numeric(),TempCatS=character(),JulyTemp=numeric(),JN=numeric(),
TempCatJ=character(),MaxD=numeric(),MN=numeric(),TempCatM=character(),
Max24.9=numeric(),Max27=numeric(),Flag=numeric(),Year=character(),Collector=character())
SummerMonthCnt<-table[table$month=='06'|table$month=='07'|table$month=='08',]
yrCol<- unique(SummerMonthCnt[,c('year','Collector')])
n<-1
for (n in 1:dim(yrCol)[1]){
temp <- table[which(table$Collector==yrCol[n,2] & table$year==yrCol[n,1]),]##Subset by Year and Collector
AvgDay <- ddply(temp,c("SID","day","month","year"),summarize,mean=mean(Temp),N=length(Temp))#AvgByDay
AvgDay$day<-as.numeric(substr(AvgDay$day,4,5))
MaxDay<- ddply(temp,c("SID","day","month","year"),summarize,max=max(Temp),N=length(Temp))#MaxOnAGivenDay
MaxDay$d<-as.numeric(substr(MaxDay$day,4,5))
##Avg Summer Temp##
SummerMonths <- AvgDay[AvgDay$month=='06'|AvgDay$month=='07'|AvgDay$month=='08'&AvgDay$N>=24,]
AvgSummerTemp <- ddply(SummerMonths,"SID",summarize,SummerTemp=mean(mean),SN=length(mean))#Summer Temp Month
AvgSummerTemp$TempCatS <- AvgSummerTemp$SummerTemp
AvgSummerTemp$TempCatS<- as.character(AvgSummerTemp$TempCat)
AvgSummerTemp$TempCatS[AvgSummerTemp$SummerTemp<18.29]<-"Cold"
AvgSummerTemp$TempCatS[AvgSummerTemp$SummerTemp>21.7]<-"Warm"
AvgSummerTemp$TempCatS[AvgSummerTemp$SummerTemp>=18.29&AvgSummerTemp$SummerTemp<=21.7]<-"Cool"
##Avg July Temp##
July<- AvgDay[AvgDay$month=='07'& AvgDay$N>=24,]
AvgJulyTemp <- ddply(July,"SID",summarize,JulyTemp=mean(mean),JN=length(mean))#Summer Temp Month
AvgJulyTemp$TempCatJ <- AvgJulyTemp$JulyTemp
AvgJulyTemp$TempCatJ<- as.character(AvgJulyTemp$TempCat)
AvgJulyTemp$TempCatJ[AvgJulyTemp$JulyTemp<18.45]<-"Cold"
AvgJulyTemp$TempCatJ[AvgJulyTemp$JulyTemp>22.30]<-"Warm"
AvgJulyTemp$TempCatJ[AvgJulyTemp$JulyTemp>=18.45&AvgJulyTemp$JulyTemp<=22.30]<-"Cool"
##Max Daily Mean##
MaxDailyTemp <- ddply(AvgDay,"SID",summarize,MaxD = max(mean),MN=length(mean))
MaxDailyTemp$TempCatM <- MaxDailyTemp$MaxD
MaxDailyTemp$TempCatM <- as.character(MaxDailyTemp$MaxD)
MaxDailyTemp$TempCatM [MaxDailyTemp$MaxD<22.4]<- "Cold"
MaxDailyTemp$TempCatM [MaxDailyTemp$MaxD>26.3]<- "Warm"
MaxDailyTemp$TempCatM [MaxDailyTemp$MaxD>=22.4&MaxDailyTemp$MaxD<=26.3]<- "Cool"
##N Days >= 24.9 degree C and N Days >= 27 May 1 - Sept 15##
MaxDates<- MaxDay[MaxDay$month=='05'|MaxDay$month=='06'|MaxDay$month=='07'|MaxDay$month=='08'|
(MaxDay$month=='09' & MaxDay$d<=15),]
MaxDates$MaxTemp24.9<- ifelse(MaxDates$max>=24.9,1,0)
MaxDates$MaxTemp27<- ifelse(MaxDates$max>=27,1,0)
MaxGreaterThanTemp<-ddply(MaxDates,"SID",summarize,Max24.9=sum(MaxTemp24.9),Max27=sum(MaxTemp27))
##Combine and Export Metrics By Year
TempMetrics <- merge(AvgSummerTemp,AvgJulyTemp,by="SID")
TempMetrics <-merge(TempMetrics,MaxDailyTemp,by="SID")
TempMetrics <-merge(TempMetrics,MaxGreaterThanTemp,by="SID")
TempMetrics$Flag [TempMetrics$SN<92|TempMetrics$JN <31] <- 1
TempMetrics$Year<-yrCol[n,1]
TempMetrics$Collector<-yrCol[n,2]
TempMetricsAll<-rbind(TempMetricsAll,TempMetrics)
write.csv(TempMetrics,"/home/mkozlak/Documents/Projects/2020/TemperatureDB/MetricCalcs/TempMetrics040220.csv",append=TRUE,row.names=FALSE)
write.csv(TempMetrics,paste0("/home/mkozlak/Documents/Projects/2020/TemperatureDB/MetricCalcs/TempMetrics070219_",yrCol[n,2],yrCol[n,1],".csv"),row.names=FALSE)
}
warnings()
dbDisconnect(db);
n<-1
TempMetricsAll<-data.frame(SID=character(),SummerTemp=numeric(),SN=numeric(),TempCatS=character(),JulyTemp=numeric(),JN=numeric(),
TempCatJ=character(),MaxD=numeric(),MN=numeric(),TempCatM=character(),
Max24.9=numeric(),Max27=numeric(),Flag=numeric(),Year=character(),Collector=character())
SummerMonthCnt<-table[table$month=='06'|table$month=='07'|table$month=='08',]
yrCol<- unique(SummerMonthCnt[,c('year','Collector')])
for (n in 1:dim(yrCol)[1]){
temp <- table[which(table$Collector==yrCol[n,2] & table$year==yrCol[n,1]),]##Subset by Year and Collector
AvgDay <- ddply(temp,c("SID","day","month","year"),summarize,mean=mean(Temp),N=length(Temp))#AvgByDay
AvgDay$day<-as.numeric(substr(AvgDay$day,4,5))
MaxDay<- ddply(temp,c("SID","day","month","year"),summarize,max=max(Temp),N=length(Temp))#MaxOnAGivenDay
MaxDay$d<-as.numeric(substr(MaxDay$day,4,5))
##Avg Summer Temp##
SummerMonths <- AvgDay[AvgDay$month=='06'|AvgDay$month=='07'|AvgDay$month=='08'&AvgDay$N>=24,]
AvgSummerTemp <- ddply(SummerMonths,"SID",summarize,SummerTemp=mean(mean),SN=length(mean))#Summer Temp Month
AvgSummerTemp$TempCatS <- AvgSummerTemp$SummerTemp
AvgSummerTemp$TempCatS<- as.character(AvgSummerTemp$TempCat)
AvgSummerTemp$TempCatS[AvgSummerTemp$SummerTemp<18.29]<-"Cold"
AvgSummerTemp$TempCatS[AvgSummerTemp$SummerTemp>21.7]<-"Warm"
AvgSummerTemp$TempCatS[AvgSummerTemp$SummerTemp>=18.29&AvgSummerTemp$SummerTemp<=21.7]<-"Cool"
##Avg July Temp##
July<- AvgDay[AvgDay$month=='07'& AvgDay$N>=24,]
AvgJulyTemp <- ddply(July,"SID",summarize,JulyTemp=mean(mean),JN=length(mean))#Summer Temp Month
AvgJulyTemp$TempCatJ <- AvgJulyTemp$JulyTemp
AvgJulyTemp$TempCatJ<- as.character(AvgJulyTemp$TempCat)
AvgJulyTemp$TempCatJ[AvgJulyTemp$JulyTemp<18.45]<-"Cold"
AvgJulyTemp$TempCatJ[AvgJulyTemp$JulyTemp>22.30]<-"Warm"
AvgJulyTemp$TempCatJ[AvgJulyTemp$JulyTemp>=18.45&AvgJulyTemp$JulyTemp<=22.30]<-"Cool"
##Max Daily Mean##
MaxDailyTemp <- ddply(AvgDay,"SID",summarize,MaxD = max(mean),MN=length(mean))
MaxDailyTemp$TempCatM <- MaxDailyTemp$MaxD
MaxDailyTemp$TempCatM <- as.character(MaxDailyTemp$MaxD)
MaxDailyTemp$TempCatM [MaxDailyTemp$MaxD<22.4]<- "Cold"
MaxDailyTemp$TempCatM [MaxDailyTemp$MaxD>26.3]<- "Warm"
MaxDailyTemp$TempCatM [MaxDailyTemp$MaxD>=22.4&MaxDailyTemp$MaxD<=26.3]<- "Cool"
##N Days >= 24.9 degree C and N Days >= 27 May 1 - Sept 15##
MaxDates<- MaxDay[MaxDay$month=='05'|MaxDay$month=='06'|MaxDay$month=='07'|MaxDay$month=='08'|
(MaxDay$month=='09' & MaxDay$d<=15),]
MaxDates$MaxTemp24.9<- ifelse(MaxDates$max>=24.9,1,0)
MaxDates$MaxTemp27<- ifelse(MaxDates$max>=27,1,0)
MaxGreaterThanTemp<-ddply(MaxDates,"SID",summarize,Max24.9=sum(MaxTemp24.9),Max27=sum(MaxTemp27))
##Combine and Export Metrics By Year
TempMetrics <- merge(AvgSummerTemp,AvgJulyTemp,by="SID")
TempMetrics <-merge(TempMetrics,MaxDailyTemp,by="SID")
TempMetrics <-merge(TempMetrics,MaxGreaterThanTemp,by="SID")
TempMetrics$Flag [TempMetrics$SN<92|TempMetrics$JN <31] <- 1
TempMetrics$Year<-yrCol[n,1]
TempMetrics$Collector<-yrCol[n,2]
TempMetricsAll<-rbind(TempMetricsAll,TempMetrics)
write.csv(TempMetrics,"/home/mkozlak/Documents/Projects/2020/TemperatureDB/MetricCalcs/TempMetrics040220.csv",append=TRUE,row.names=FALSE)
write.csv(TempMetrics,paste0("/home/mkozlak/Documents/Projects/2020/TemperatureDB/MetricCalcs/TempMetrics040220_",yrCol[n,2],yrCol[n,1],".csv"),row.names=FALSE)
}
warnings()
db_path <- '/home/mkozlak/Documents/Projects/2020/TemperatureDB/' #linux path
db <- dbConnect(SQLite(), dbname=paste(db_path,"stream.temperature.sqlite",sep=''));
##Query with Field Flags and put into R data.fram and native R types
SELECTflag<- "SELECT probe_temps.ProbeID, probe_temps.SID, probe_temps.Date_Time, probe_temps.Temp, probe_temps.UOM, probe_temps.Collector, probe_temps.ProbeType, fieldflag.DateStart, fieldflag.DateEnd, fieldflag.COMMENT
FROM probe_temps
LEFT JOIN fieldflag ON probe_temps.ProbeID = fieldflag.ProbeID AND probe_temps.SID = fieldflag.SID AND probe_temps.Date_Time >= fieldflag.DateStart AND probe_temps.Date_Time <= fieldflag.DateEnd"
table<- dbGetQuery(db,SELECTflag)
#close ODBC
dbDisconnect(db)
table$day <- substr(table$Date_Time,6,10)##Add column of data that includes month_day
table$month<- substr(table$Date_Time,6,7)##Add column of data that includes month
table$year<- substr(table$Date_Time,1,4)##Add column of data that includes year
table$date<-ymd_hms(table$Date_Time)
##Write CSV of Avg Day with Flag for all records##
AvgDay <- ddply(table,c("ProbeID","SID","day","month","year","Collector","UOM","COMMENT"),summarize,mean=mean(Temp),min=min(Temp),
max=max(Temp),maxmin= (max(Temp)-min(Temp)),N=length(Temp))#AvgByDay
AvgDay$Flag [AvgDay$N<24|AvgDay$min<0|AvgDay$maxmin>5|AvgDay$mean>=30]<-1
AvgDay$Flag [!is.na(AvgDay$COMMENT)]<-1
write.csv(AvgDay,"/home/mkozlak/Documents/Projects/2020/TemperatureDB/TempAvgDay.csv",row.names=FALSE)
n<-1
TempMetricsAll<-data.frame(SID=character(),SummerTemp=numeric(),SN=numeric(),TempCatS=character(),JulyTemp=numeric(),JN=numeric(),
TempCatJ=character(),MaxD=numeric(),MN=numeric(),TempCatM=character(),
Max24.9=numeric(),Max27=numeric(),Flag=numeric(),Year=character(),Collector=character())
SummerMonthCnt<-table[table$month=='06'|table$month=='07'|table$month=='08',]
yrCol<- unique(SummerMonthCnt[,c('year','Collector')])
yrCol
for (n in 1:dim(yrCol)[1]){
temp <- table[which(table$Collector==yrCol[n,2] & table$year==yrCol[n,1]),]##Subset by Year and Collector
AvgDay <- ddply(temp,c("SID","day","month","year"),summarize,mean=mean(Temp),N=length(Temp))#AvgByDay
AvgDay$day<-as.numeric(substr(AvgDay$day,4,5))
MaxDay<- ddply(temp,c("SID","day","month","year"),summarize,max=max(Temp),N=length(Temp))#MaxOnAGivenDay
MaxDay$d<-as.numeric(substr(MaxDay$day,4,5))
##Avg Summer Temp##
SummerMonths <- AvgDay[AvgDay$month=='06'|AvgDay$month=='07'|AvgDay$month=='08'&AvgDay$N>=24,]
AvgSummerTemp <- ddply(SummerMonths,"SID",summarize,SummerTemp=mean(mean),SN=length(mean))#Summer Temp Month
AvgSummerTemp$TempCatS <- AvgSummerTemp$SummerTemp
AvgSummerTemp$TempCatS<- as.character(AvgSummerTemp$TempCat)
AvgSummerTemp$TempCatS[AvgSummerTemp$SummerTemp<18.29]<-"Cold"
AvgSummerTemp$TempCatS[AvgSummerTemp$SummerTemp>21.7]<-"Warm"
AvgSummerTemp$TempCatS[AvgSummerTemp$SummerTemp>=18.29&AvgSummerTemp$SummerTemp<=21.7]<-"Cool"
##Avg July Temp##
July<- AvgDay[AvgDay$month=='07'& AvgDay$N>=24,]
AvgJulyTemp <- ddply(July,"SID",summarize,JulyTemp=mean(mean),JN=length(mean))#Summer Temp Month
AvgJulyTemp$TempCatJ <- AvgJulyTemp$JulyTemp
AvgJulyTemp$TempCatJ<- as.character(AvgJulyTemp$TempCat)
AvgJulyTemp$TempCatJ[AvgJulyTemp$JulyTemp<18.45]<-"Cold"
AvgJulyTemp$TempCatJ[AvgJulyTemp$JulyTemp>22.30]<-"Warm"
AvgJulyTemp$TempCatJ[AvgJulyTemp$JulyTemp>=18.45&AvgJulyTemp$JulyTemp<=22.30]<-"Cool"
##Max Daily Mean##
MaxDailyTemp <- ddply(AvgDay,"SID",summarize,MaxD = max(mean),MN=length(mean))
MaxDailyTemp$TempCatM <- MaxDailyTemp$MaxD
MaxDailyTemp$TempCatM <- as.character(MaxDailyTemp$MaxD)
MaxDailyTemp$TempCatM [MaxDailyTemp$MaxD<22.4]<- "Cold"
MaxDailyTemp$TempCatM [MaxDailyTemp$MaxD>26.3]<- "Warm"
MaxDailyTemp$TempCatM [MaxDailyTemp$MaxD>=22.4&MaxDailyTemp$MaxD<=26.3]<- "Cool"
##N Days >= 24.9 degree C and N Days >= 27 May 1 - Sept 15##
MaxDates<- MaxDay[MaxDay$month=='05'|MaxDay$month=='06'|MaxDay$month=='07'|MaxDay$month=='08'|
(MaxDay$month=='09' & MaxDay$d<=15),]
MaxDates$MaxTemp24.9<- ifelse(MaxDates$max>=24.9,1,0)
MaxDates$MaxTemp27<- ifelse(MaxDates$max>=27,1,0)
MaxGreaterThanTemp<-ddply(MaxDates,"SID",summarize,Max24.9=sum(MaxTemp24.9),Max27=sum(MaxTemp27))
##Combine and Export Metrics By Year
TempMetrics <- merge(AvgSummerTemp,AvgJulyTemp,by="SID")
TempMetrics <-merge(TempMetrics,MaxDailyTemp,by="SID")
TempMetrics <-merge(TempMetrics,MaxGreaterThanTemp,by="SID")
TempMetrics$Flag [TempMetrics$SN<92|TempMetrics$JN <31] <- 1
TempMetrics$Year<-yrCol[n,1]
TempMetrics$Collector<-yrCol[n,2]
TempMetricsAll<-rbind(TempMetricsAll,TempMetrics)
write.csv(TempMetrics,paste0("/home/mkozlak/Documents/Projects/2020/TemperatureDB/MetricCalcs/TempMetrics040220_",yrCol[n,2],yrCol[n,1],".csv"),row.names=FALSE)
}
TempMetricsAll
write.csv(TempMetricsAll,"/home/mkozlak/Documents/Projects/2020/TemperatureDB/MetricCalcs/TempMetrics_040220.csv",row.names=FALSE)
data<- data.frame("t1","t2")
data
colnames(data)<-("t1","t2")
colnames(data)<-c("t1","t2")
data
rbind(data,c("1","2"))
append(data,c("1","2"))
data
rbind(data,c= 2,c("1","2"))
rbind(data,c("t3","t4"))
rbind(data,data.frame(c(t"t3","t4")))
data.frame(c(t"t3","t4"))
rbind(data,data.frame(c("t3","t4")))
data.frame(c("t3","t4"))
rbind(data,data.frame("t3","t4"))
data.frame("t3","t4")
data<- data.frame("t1=1:3","t2=2:4")
data
data<- as.data.frame(x=1, y=1:10)
data
data<- data.frame(1, 1:10, sample(L3, 10, replace = TRUE))
L3 <- LETTERS[1:3]
fac <- sample(L3, 10, replace = TRUE)
(d <- data.frame(x = 1, y = 1:10, fac = fac))
## The "same" with automatic column names:
data.frame(1, 1:10, sample(L3, 10, replace = TRUE))
colnames(data)<-c("t1","t2","t3")
dim(data)
L3 <- LETTERS[1:3]
fac <- sample(L3, 10, replace = TRUE)
(d <- data.frame(x = 1, y = 1:10, fac = fac))
## The "same" with automatic column names:
data<-data.frame(1, 1:10, sample(L3, 10, replace = TRUE))
colnames(data)<-c("t1","t2","t3")
data
library(dplyr)
data %>% add_row(t1=11,t2=12,t3='z')
add_row(data,t1=11,t2=12,t3='z')
add_row(data,t1=13,t2=14,t3='y')
install.packages('IRkernel')
IRkernel::installspec()
install.packages(terra, dependencies = TRUE)
install.packages("terra", dependencies = TRUE)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
data <- data.frame(c(1,2,3,4),c(1,2,3,4))
data
ggplot(data=data)+
geom_point()
gplot(data=data,aes(data[,1],data[,2]))+
geom_point()
ggplot(data=data,aes(data[,1],data[,2]))+
geom_point()
library(ggplot2)
names(iris)
ggplot(iris,aes(Sepal.Length,Sepal.Width))+
geom_point()
install.packages("dplyr")
install.packages("vegan")
install.packages("leaflet",dependencies = TRUE)
install.packages("rmarkdown",dependencies = TRUE)
install.packages("bookdown",dependencies = TRUE)
setwd("/home/mkozlak/Documents/Projects/GitHub/HQStreamEval/analysis/")
library(rgdal)
ogrInfo(dsn="data/raw_spatial_vector/catchments_ct.shp")
setwd("/home/mkozlak/Documents/Projects/GitHub/HQStreamEval/analysis/data/raw_spatial_vector/")
ogrInfo(dsn="/data/raw_spatial/vector/catchments_ct.shp")
ogrInfo(dsn="data/raw_spatial/vector/catchments_ct.shp")
ogrInfo(dsn="data/raw_spatial/vector/catchments_ct.shp",layer="catchments_ct")
knitr::opts_chunk$set(message=FALSE, warning=FALSE)
library(rgdal)
ogrInfo(dsn="data/raw_spatial/vector/catchments_ct.shp",layer="catchments_ct")
library(rmarkdown)
render("bcg_data_exploration.Rmd")
render("/home/mkozlak/Documents/Projects/GitHub/HQStreamEval/analysis/bcg_data_exploration.Rmd")
render("/home/mkozlak/Documents/Projects/GitHub/HQStreamEval/analysis/bcg_data_exploration.Rmd")
